#!/usr/bin/python3
# coding : utf-8

import sys

from math import factorial, exp
import time

ERROR_CODE_STATUS = 84

def display_usage(binary):
    usage = [
        'USAGE',
        '\t{} [n k | d]'.format(binary),
        '',
        'DESCRIPTION',
        '\tn\tn value for the computation of (n k)',
        '\tk\tk value for the computation of (n k)',
        '\td\taverage duration of calls (in seconds)'
    ]
    print('\n'.join(usage))

def argument_parsing():
    try:
        if len(sys.argv) == 2 and sys.argv[1] == "-h":
            display_usage(sys.argv[0])
            sys.exit(0)
        elif len(sys.argv) == 2:
            d = int(sys.argv[1])
            return d
        elif len(sys.argv) == 3:
            n = int(sys.argv[1])
            k = int(sys.argv[2])
            if k > n or n < 0 or k < 0:
                raise Exception
            return n, k
        else:
            sys.exit(ERROR_CODE_STATUS)
    except:
        sys.exit(ERROR_CODE_STATUS)

def a_among_b(a, b):
    return  factorial(a) // (factorial(b) * factorial(a - b))

def combination(n, k):
    print("{}-combination of a {} set:".format(k, n))
    print(a_among_b(n, k))

def template_distribution(distribution, values, computation_time):
    print("{} distribution:".format(distribution))
    for i, value in enumerate(values[:51]):
        end = '\n' if (i + 1) % 6 == 0 or i == 50 else '\t'
        print("{} -> {:.3f}".format(i, value), end=end)
    overload = sum(values[26:])
    print("overload:\t{:.1f}%".format((1.0 if overload == 0 else overload) * 100.0))
    print("computation time:\t {:.2f} ms".format(computation_time))

def binomial_distribution(d):
    def binomiale(n, k, p):
        """
        n -- Number of experience
        k -- Number excepted.
        p -- probability to obtained a good tirage.
        q -- probability to obtained a bad tirage. (1 - p)
        """
        return a_among_b(n, k) * pow(p, k) * pow(1 - p, n - k)
 
    n, p = 3500, d / (60 * 60 * 8)
 
    values = []
    k = 0

    computation_time = time.time()
    try:
        while k <= 50 or k <= (3500 * d / 28800) or values[-1] >= 10**-4:
            values.append(binomiale(n, k, p))
            k += 1
    except:
        values = [0] * 51
    computation_time = (time.time() - computation_time) * 1000.0
    template_distribution("Binomial", values, computation_time)

def poisson_distribution(d):
    def poisson(l, k):
        """
        l -- lambda, the average number of good tirage.
        k -- Number excepted.
        """
        return (pow(l, k) * exp(-l)) / factorial(k)
 
    l = 3500 * (d / (60 * 60 * 8))

    values = []
    k = 0

    computation_time = time.time()
    try:
        while k <= 50 or k <= (3500 * d / 28800) or values[-1] >= 10**-4:
            values.append(poisson(l, k))
            k += 1
    except:
        values = [0] * 51
    computation_time = (time.time() - computation_time) * 1000.0
 
    template_distribution("Poisson", values, computation_time)

if __name__ == "__main__":
    args = argument_parsing()
 
    if isinstance(args, int):
        binomial_distribution(args)
        print('')
        poisson_distribution(args)
    else:
        combination(*args)
    sys.exit(0)
